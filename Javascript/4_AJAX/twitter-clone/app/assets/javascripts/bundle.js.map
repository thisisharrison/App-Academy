{"version":3,"sources":["./frontend/api_util.js","./frontend/follow_toggle.js","./frontend/infinite_tweets.js","./frontend/tweet_compose.js","./frontend/user_search.js","webpack/bootstrap","./frontend/twitter.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA,2BAA2B,GAAG;AAC9B;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA,wCAAwC,SAAS;AACjD;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA,yB;;;;;;;;;;AC1CA,gBAAgB,mBAAO,CAAC,0CAAY;;AAEpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,8B;;;;;;;;;;AC9DA,gBAAgB,mBAAO,CAAC,0CAAY;;AAEpC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,sBAAsB;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gC;;;;;;;;;;AC/CA,gBAAgB,mBAAO,CAAC,0CAAY;;AAEpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,QAAQ,IAAI,cAAc;AACxD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;;;;AClFA,gBAAgB,mBAAO,CAAC,0CAAY;AACpC,qBAAqB,mBAAO,CAAC,oDAAiB;;AAE9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ,IAAI,cAAc;;AAElE;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,SAAS;AACT;AACA;;AAEA,4B;;;;;;UCpCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;ACrBA,qBAAqB,mBAAO,CAAC,oDAAiB;AAC9C,uBAAuB,mBAAO,CAAC,wDAAmB;AAClD,qBAAqB,mBAAO,CAAC,oDAAiB;AAC9C,mBAAmB,mBAAO,CAAC,gDAAe;;AAE1C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,CAAC,E","file":"bundle.js","sourcesContent":["const ApiUtil = {\n\n    followUser: id => ApiUtil.changeFollowStatus(id, 'POST'),\n\n    unfollowUser: id => ApiUtil.changeFollowStatus(id, 'DELETE'),\n\n    changeFollowStatus: (id, method) => {\n        return $.ajax({\n            url: `/users/${id}/follow`,\n            dataType: 'json',\n            method\n        })\n    },\n\n    searchUsers: (queryVal) => (\n        $.ajax({\n            url: `/users/search?query=${queryVal}`,\n            dataType: 'json',\n            method: 'GET'\n        })\n    ),\n\n    createTweet: (tweet) => (\n        $.ajax({\n            url: '/tweets',\n            dataType: 'json',\n            method: 'POST',\n            data: tweet\n        })\n    ),\n\n    fetchTweets: (data) => (\n        $.ajax({\n            url: '/feed',\n            dataType: 'json',\n            method: 'GET',\n            data: data\n        })\n    )\n    \n}\n\nmodule.exports = ApiUtil;","const ApiUtil = require(\"./api_util\");\n\nclass FollowToggle {\n    constructor (el, options) {\n        this.$el = $(el);\n        \n        this.userId = this.$el.data('user-id') || options.userId;\n        this.followState = this.$el.data('initial-follow-state') || options.followState;\n\n        this.render();\n        this.$el.on('click', this.handleClick.bind(this));\n    }\n\n    render () {\n        switch (this.followState) {\n            case 'followed':\n                this.$el.html('Unfollow!');\n                this.$el.prop(\"disabled\", false);\n                break;\n            case 'unfollowed':\n                this.$el.html('Follow!');\n                this.$el.prop(\"disabled\", false);\n                break;\n            case 'following':\n                this.$el.html('Following...');\n                this.$el.prop(\"disabled\", true);\n                break;\n            case 'unfollowing':\n                this.$el.html('Unfollowing...');\n                this.$el.prop(\"disabled\", true);\n                break;\n        }   \n    }\n\n    handleClick (event) {\n        event.preventDefault();\n        \n        const toggle = this;\n\n        if (this.followState === 'followed') {\n            // Renders disabled toggle\n            this.followState = 'unfollowing';\n            this.render();\n            \n            // Returns ajax request, use promise when fulfilled\n            ApiUtil.unfollowUser(this.userId).then(() => {\n                toggle.followState = 'unfollowed';\n                toggle.render();\n            });\n\n        } else if (this.followState === 'unfollowed') {\n            this.followState = 'following';\n            this.render();\n            \n            ApiUtil.followUser(this.userId).then(() => {\n                toggle.followState = 'followed';\n                toggle.render();\n            })\n        }\n    }\n}\n\nmodule.exports = FollowToggle;","const ApiUtil = require(\"./api_util\");\n\nclass InfiniteTweets {\n    constructor (el) {\n        this.$el = $(el);\n        this.$feed = this.$el.find('#feed');\n        this.maxCreatedAt = null;\n\n        this.$el.find('a').on('click', this.fetchTweets.bind(this));\n\n        // For tweet compose\n        this.$el.on('insert-tweet', this.addNewTweet.bind(this));\n    }\n\n    fetchTweets (event) {\n        event.preventDefault();\n\n        // Add payload with max_created_at for ruby's params\n        const payload = {};\n        if (this.maxCreatedAt) { \n            payload.max_created_at = this.maxCreatedAt;\n        }\n        ApiUtil.fetchTweets(payload).then((data) => this.insertTweets(data))\n    }\n\n    insertTweets (data) {\n        this.$feed.append(data.map(\n            this.tweetElement\n        ));\n        this.maxCreatedAt = data[data.length - 1].created_at;\n        if (data.length < 20) {\n            this.$el.find('a').off('click')\n                .replaceWith('<b>No more tweets!</b>');\n        }\n    }\n\n    tweetElement (tweet) {\n        return `<li>${JSON.stringify(tweet)}</li>`\n    }\n\n    addNewTweet (event, data) {\n        this.$feed.prepend(this.tweetElement(data));\n        // Update ivar with newly created tweet\n        this.maxCreatedAt = data.created_at;\n    }\n}\n\nmodule.exports = InfiniteTweets;","const ApiUtil = require(\"./api_util\");\n\nclass TweetCompose {\n    constructor (el) {\n        this.$el = $(el);\n\n        this.$input = this.$el.find('textarea[name=tweet\\\\[content\\\\]]');\n        this.$input.on('input', this.handleInput.bind(this));\n        \n        this.$mentionDiv = this.$el.find('.mention-users');\n        this.$el.find('.add-mention-user').on('click', this.addMentionUser.bind(this));\n        // event delgation as remove-mention-user is not loaded at the beginning\n        this.$mentionDiv.on('click', '.remove-mentioned-user', \n            (e) => {this.removeMentionUser(e)}\n        );\n\n        this.$el.on('submit', this.submit.bind(this));\n    }\n\n    submit (event) {\n        event.preventDefault();\n        const data = this.$el.serializeJSON();\n        this.$el.find(':input').prop('disabled', true);\n        ApiUtil.createTweet(data).then((resp) => this.handleSuccess(resp));\n        \n    }\n\n    clearInput () {\n        this.$input.val(\"\");\n        this.$el.find(':input').prop('disabled', false);\n        this.$el.find('.chars-left').empty();\n        this.$mentionDiv.empty()\n    }\n\n    handleSuccess (data) {\n        // Select ul of tweets. ID of tweet is in form data. Better than hardcoding ul ID.\n        const $ul = $(this.$el.data('tweets-ul'));\n        // const tweet = JSON.stringify(data);\n        // const $li = $('<li>');\n        // $li.text(tweet);\n        // $ul.append($li);\n        \n        // Using InfiniteTweet#addNewTweet\n        $ul.trigger('insert-tweet', data);\n        this.clearInput();\n    }\n\n    handleInput (data) {\n        const tweetLength = this.$input.val().length;\n        const $charsLeft = this.$el.find('.chars-left');\n        $charsLeft.text(`${140 - tweetLength} characters left.`)\n    }\n\n    addMentionUser (event) {\n        event.preventDefault();\n        this.newUserSelect();\n    }\n\n    newUserSelect () {\n        const options = window.users.map(user =>\n            `<option value='${user.id}'>${user.username}</option>`).join('');\n        // wrapped in div so removeMentionUser does not remove all mentions\n        const select = `\n            <div>\n                <select name=\"tweet[mentioned_user_ids][]\">\n                    ${options}\n                </select>\n\n                <a href=\"#\" class=\"remove-mentioned-user\">Remove Mention</a>\n            </div>\n        `;\n        this.$mentionDiv.append(select);\n    }\n\n    removeMentionUser (event) {\n        event.preventDefault();\n        // currentTarget = anchor tag, parent includes the select of this mention\n        const $parent = $(event.currentTarget).parent()\n        $parent.remove();\n    }\n}\n\nmodule.exports = TweetCompose;","const ApiUtil = require(\"./api_util\");\nconst FollowToggle = require(\"./follow_toggle\");\n\nclass UserSearch {\n    constructor (el) {\n        this.$el = $(el);\n\n        this.$input = this.$el.find('input');\n        this.$ul = this.$el.find('ul');\n\n        this.$input.on('input', this.handleInput.bind(this));\n    }\n\n    handleInput (event) {\n        ApiUtil.searchUsers(this.$input.val()).then(resp => this.renderResults(resp));\n    }\n\n    renderResults (resp) {\n        // Empty out previous results\n        this.$ul.empty();\n        resp.forEach(user => {\n            const $li = $('<li>');\n            $li.html(`<a href=\"/users/${user.id}\">${user.username}</a>`);\n\n            const $followToggle = $('<button>');\n            new FollowToggle ($followToggle, {\n                userId: user.id, \n                followState: user.followed ? 'followed' : 'unfollowed'\n            });\n\n            $li.append($followToggle);\n            this.$ul.append($li);\n        });\n    }\n}\n\nmodule.exports = UserSearch;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const FollowToggle = require('./follow_toggle');\nconst InfiniteTweets = require('./infinite_tweets');\nconst TweetCompose = require('./tweet_compose');\nconst UserSearch = require('./user_search');\n\n$(() => {\n    const $toggles = $('button.follow-toggle');\n    $toggles.each((i, el) => {\n        new FollowToggle (el);\n    });\n\n    const $userSearch = $('nav.user-search');\n    $userSearch.each((i, el) => {\n        new UserSearch (el);\n    })\n\n    const $tweetCompose = $('form.tweet-compose');\n    new TweetCompose ($tweetCompose);\n\n    const $infiniteTweets = $('.infinite-tweets');\n    new InfiniteTweets($infiniteTweets);\n});"],"sourceRoot":""}